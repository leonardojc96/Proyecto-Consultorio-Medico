//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto_Consultorio_Medico.Modelo
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    
    public partial class Turnos
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Turnos()
        {
            this.ConsultaMedica = new HashSet<ConsultaMedica>();
        }
    
        public int Id { get; set; }
        public int Id_Paciente { get; set; }
        public int Id_Consultorio { get; set; }
    
        public virtual Consultorios Consultorios { get; set; }
        public virtual Pacientes Pacientes { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ConsultaMedica> ConsultaMedica { get; set; }

        public bool Save(Turnos turno)
        {
            using (Proyecto_centro_medicoEntities db = new Proyecto_centro_medicoEntities())
            {
                db.Turnos.Add(turno);

                if (db.SaveChanges() == 1)
                {
                    return true;
                }
                return false;
            }
        }

        public Turnos GetTurnoById(int id)
        {
            using (Proyecto_centro_medicoEntities db = new Proyecto_centro_medicoEntities())
            {
                return db.Turnos.Where(x => x.Id_Paciente == id).FirstOrDefault();
            }
        }

        public int GetCantidadTurnos(int idMedico)
        {
            using (Proyecto_centro_medicoEntities db = new Proyecto_centro_medicoEntities())
            {
                return (from t in db.Turnos
                       join c in db.ConsultaMedica on t.Id equals c.Id_Turno
                       join m in db.Medicos on c.Id_Medico equals m.Id
                       where DateTime.Today == c.Fecha && m.Id == idMedico
                       select t).Count();
            }
        }

        public ICollection<Medicos> GetLastMedicos(int idPaciente)
        {
            using (Proyecto_centro_medicoEntities db = new Proyecto_centro_medicoEntities())
            {
                return (from m in db.Medicos
                        join c in db.ConsultaMedica on m.Id equals c.Id_Medico
                        join h in db.HistorialConsultas on c.Id_Historico equals h.Id
                        join p in db.Pacientes on h.Id_Paciente equals p.Id
                        where p.Id == idPaciente
                        select m).Distinct().ToList();
            }
        }

        public IEnumerable<dynamic> GetTurnos()
        {
            IEnumerable<dynamic> x = new List<dynamic>();
            using (Proyecto_centro_medicoEntities db = new Proyecto_centro_medicoEntities())
            {
                x = (from c in db.Turnos
                     join p in db.Pacientes on c.Id_Paciente equals p.Id
                     join t in db.Consultorios on c.Id_Consultorio equals t.Id
                     join e in db.Especialidades on t.Id_Especialidad equals e.Id
                     join hc in db.HistorialConsultas on p.Id equals hc.Id_Paciente
                     join co in db.ConsultaMedica on hc.Id equals co.Id_Historico
                     join s in db.Medicos on co.Id_Medico equals s.Id


                     select new
                     {
                         nombrePaciente = p.Nombre,
                         nombreMedico = s.Nombre,
                         nombreConsul = t.Nombre,
                         nombreEspecial = e.Nombre
                     }).ToList();
                return x;
            }
           
        }

        public Consultorios GetConsultoriosByMedicoYEspecialidad(int idMed, int idEsp)
        {
            using (Proyecto_centro_medicoEntities db = new Proyecto_centro_medicoEntities())
            {
                return (from c in db.Consultorios
                          join e in db.Especialidades on c.Id_Especialidad equals e.Id
                          join mc in db.MedicoConsultorio on c.Id equals mc.Id_Consultorio
                          join m in db.Medicos on mc.Id_Medico equals m.Id
                          where m.Id == idMed && e.Id == idEsp
                          select c).FirstOrDefault();
            }
        }
    }
}
